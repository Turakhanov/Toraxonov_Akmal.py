{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d2f2cb6",
   "metadata": {},
   "source": [
    "Homework 1. ToDo List Application\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f25ec7a4",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Task:\n",
    "    def __init__(self,title,description,due_date):\n",
    "        self.title=title\n",
    "        self.description=description\n",
    "        self.due_date=due_date\n",
    "        self.status=\"Incomplete\"\n",
    "\n",
    "    def mark_complete(self):\n",
    "        self.status = \"Complete\"\n",
    "\n",
    "class ToDoList:\n",
    "    def __init__(self):\n",
    "        self.tasks = []\n",
    "\n",
    "    def add(self,task):\n",
    "        self.tasks.append(task)\n",
    "\n",
    "    def completed(self,title):\n",
    "        for task in self.tasks:\n",
    "            if task.title==title:\n",
    "                print(f\"Task {title} marked as complete\")\n",
    "        print(f\"This tasks could not found\")    \n",
    "\n",
    "    def all_tasks(self):\n",
    "        if not self.tasks:\n",
    "            print(\"No tasks available\")\n",
    "        else:\n",
    "            for task in self.tasks:\n",
    "                print(f\"Title: {task.title} | Due: {task.due_date} | Status: {task.status}\")\n",
    "\n",
    "    def incomplete(self):\n",
    "        incomplete = [task for task in self.tasks if task.status == \"Incomplete\"]\n",
    "        if not \"Incomplete\":\n",
    "            print(\"All tasks are complete!\")\n",
    "        else:\n",
    "            for task in incomplete:\n",
    "                print(f\"Title: {task.title} | Status: {task.status}\")\n",
    "\n",
    "\n",
    "\n",
    "todo = ToDoList()\n",
    "\n",
    "while True:\n",
    "    print(\"\\n--- TO-DO LIST MENU ---\")\n",
    "    print(\"1. Add Task\")\n",
    "    print(\"2. Mark Task as Complete\")\n",
    "    print(\"3. List All Tasks\")\n",
    "    print(\"4. Show Incomplete Tasks\")\n",
    "    print(\"5. Exit\")\n",
    "\n",
    "    choice = input(\"Choose an option (1-5): \")\n",
    "\n",
    "    if choice == \"1\":\n",
    "        title = input(\"Enter task title: \")\n",
    "        description = input(\"Enter task description: \")\n",
    "        due_date = input(\"Enter due date (YYYY-MM-DD): \")\n",
    "        task = Task(title, description, due_date)\n",
    "        todo.add(task)\n",
    "        print(f\"Task '{title}' added successfully.\")\n",
    "\n",
    "    elif choice == \"2\":\n",
    "        title = input(\"Enter task title to mark as complete: \")\n",
    "        todo.completed(title)\n",
    "\n",
    "    elif choice == \"3\":\n",
    "        todo.all_tasks()\n",
    "\n",
    "    elif choice == \"4\":\n",
    "        todo.incomplete()\n",
    "\n",
    "    elif choice == \"5\":\n",
    "        print(\"Exiting program...\")\n",
    "        break\n",
    "\n",
    "    else:\n",
    "        print(\"Invalid choice! Please enter a number between 1 and 5.\")\n",
    "\n",
    "\n",
    "\n",
    "    \n",
    "\n",
    "\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "43cbd42d",
   "metadata": {},
   "source": [
    "Homework 2. Simple Blog System\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "075150d1",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Post:\n",
    "    def __init__(self,title,content,author):\n",
    "        self.title=title\n",
    "        self.content=content\n",
    "        self.author=author\n",
    "\n",
    "    def __str__(self):\n",
    "        return f\"Title: {self.title} | Content: {self.content} | Author: {self.author}\"\n",
    "\n",
    "class Blog:\n",
    "    def __init__(self):\n",
    "        self.posts = []\n",
    "    \n",
    "    def add_post(self,post):\n",
    "        self.posts.append(post)\n",
    "        print(f\"Post {post.title} is added successfully!\")\n",
    "\n",
    "    def list_all_posts(self):\n",
    "        if not self.posts:\n",
    "            print(\"No posts available!\")\n",
    "        else:\n",
    "            print(\"All posts: \\n\")\n",
    "            for post in self.posts:\n",
    "                print(post)\n",
    "\n",
    "    def posts_by_author(self,author_name):\n",
    "        found = [post for post in self.posts if post.author.lower()==author_name.lower()]\n",
    "        if not found:\n",
    "            print(\"No post found with this author\")\n",
    "        else:\n",
    "            print(f\"\\nPost by {author_name}:\")\n",
    "            for post in found:\n",
    "                print(post)\n",
    "\n",
    "    def delete_post(self,title):\n",
    "        for post in self.posts:\n",
    "            if post.title.lower()==title.lower():\n",
    "                self.posts.remove(post)\n",
    "                print(f\"Post {title} removed successfully!\")\n",
    "                return\n",
    "            print(\"No post found with this title!\")\n",
    "\n",
    "    def edit_post(self,title,new_content):\n",
    "        for post in self.posts:\n",
    "            if post.title.lower()==title.lower():\n",
    "                post.content=new_content\n",
    "                print(f\"Post {title} updated successfully!\")\n",
    "                return\n",
    "            print(\"No post found with this title!\")\n",
    "\n",
    "    def latest_posts(self,number=3):\n",
    "        if not self.posts:\n",
    "            print(\"No posts available!\")\n",
    "        else:\n",
    "            print(f\"Latest {number} post:\")\n",
    "            for post in self.posts[-number:]:\n",
    "                print(post)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "blog = Blog()\n",
    "\n",
    "while True:\n",
    "    print(\"\\n--- BLOG MENU ---\")\n",
    "    print(\"1. Add Post\")\n",
    "    print(\"2. List All Posts\")\n",
    "    print(\"3. Display Posts by Author\")\n",
    "    print(\"4. Delete Post\")\n",
    "    print(\"5. Edit Post\")\n",
    "    print(\"6. Display Latest Posts\")\n",
    "    print(\"7. Exit\")\n",
    "\n",
    "    choice = input(\"Choose an option (1-7): \")\n",
    "\n",
    "    if choice == \"1\":\n",
    "        title = input(\"Enter post title: \")\n",
    "        content = input(\"Enter post content: \")\n",
    "        author = input(\"Enter author name: \")\n",
    "        post = Post(title, content, author)\n",
    "        blog.add_post(post)\n",
    "\n",
    "    elif choice == \"2\":\n",
    "        blog.list_all_posts()\n",
    "\n",
    "    elif choice == \"3\":\n",
    "        author = input(\"Enter author name: \")\n",
    "        blog.posts_by_author(author)\n",
    "\n",
    "    elif choice == \"4\":\n",
    "        title = input(\"Enter post title to delete: \")\n",
    "        blog.delete_post(title)\n",
    "\n",
    "    elif choice == \"5\":\n",
    "        title = input(\"Enter post title to edit: \")\n",
    "        new_content = input(\"Enter new content: \")\n",
    "        blog.edit_post(title, new_content)\n",
    "\n",
    "    elif choice == \"6\":\n",
    "        n = input(\"How many latest posts to show? (Press Enter for 3): \")\n",
    "        n = int(n) if n.strip() else 3\n",
    "        blog.latest_posts(n)\n",
    "\n",
    "    elif choice == \"7\":\n",
    "        print(\"Exiting program...\")\n",
    "        break\n",
    "\n",
    "    else:\n",
    "        print(\"Invalid choice! Please enter a number between 1 and 7.\")\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "        \n",
    "        "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a9be1f60",
   "metadata": {},
   "source": [
    "Homework 3. Simple Banking System\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "cb01c1fe",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- BANK MENU ---\n",
      "1. Add Account\n",
      "2. Check Balance\n",
      "3. Deposit Money\n",
      "4. Withdraw Money\n",
      "5. Transfer Money\n",
      "6. Display All Accounts\n",
      "7. Exit\n",
      "Exiting program...\n"
     ]
    }
   ],
   "source": [
    "class Account:\n",
    "    def __init__(self, account_number, holder_name, balance=0):\n",
    "        self.account_number = account_number\n",
    "        self.holder_name = holder_name\n",
    "        self.balance = balance\n",
    "\n",
    "    def deposit(self, amount):\n",
    "        if amount > 0:\n",
    "            self.balance += amount\n",
    "            print(f\"{amount} deposited successfully.\")\n",
    "        else:\n",
    "            print(\"Deposit amount must be positive.\")\n",
    "\n",
    "    def withdraw(self, amount):\n",
    "        if amount > self.balance:\n",
    "            print(\"Insufficient balance! Withdrawal failed.\")\n",
    "        elif amount <= 0:\n",
    "            print(\"Withdrawal amount must be positive.\")\n",
    "        else:\n",
    "            self.balance -= amount\n",
    "            print(f\"{amount} withdrawn successfully.\")\n",
    "\n",
    "    def display_details(self):\n",
    "        print(f\"Account Number: {self.account_number}\")\n",
    "        print(f\"Holder Name: {self.holder_name}\")\n",
    "        print(f\"Balance: {self.balance}\")\n",
    "        print(\"-\" * 30)\n",
    "\n",
    "\n",
    "class Bank:\n",
    "    def __init__(self):\n",
    "        self.accounts = []\n",
    "\n",
    "    def add_account(self, account):\n",
    "        self.accounts.append(account)\n",
    "        print(f\"Account for {account.holder_name} added successfully!\\n\")\n",
    "\n",
    "    def find_account(self, account_number):\n",
    "        for account in self.accounts:\n",
    "            if account.account_number == account_number:\n",
    "                return account\n",
    "        return None\n",
    "\n",
    "    def check_balance(self, account_number):\n",
    "        account = self.find_account(account_number)\n",
    "        if account:\n",
    "            print(f\"Balance for {account.holder_name}: {account.balance}\")\n",
    "        else:\n",
    "            print(\"Account not found!\")\n",
    "\n",
    "    def deposit_money(self, account_number, amount):\n",
    "        account = self.find_account(account_number)\n",
    "        if account:\n",
    "            account.deposit(amount)\n",
    "        else:\n",
    "            print(\"Account not found!\")\n",
    "\n",
    "    def withdraw_money(self, account_number, amount):\n",
    "        account = self.find_account(account_number)\n",
    "        if account:\n",
    "            account.withdraw(amount)\n",
    "        else:\n",
    "            print(\"Account not found!\")\n",
    "\n",
    "    def transfer_money(self, from_acc, to_acc, amount):\n",
    "        sender = self.find_account(from_acc)\n",
    "        receiver = self.find_account(to_acc)\n",
    "        if not sender or not receiver:\n",
    "            print(\"Invalid account number(s).\")\n",
    "            return\n",
    "        if sender.balance < amount:\n",
    "            print(\"Transfer failed! Insufficient balance.\")\n",
    "        else:\n",
    "            sender.withdraw(amount)\n",
    "            receiver.deposit(amount)\n",
    "            print(f\"{amount} transferred from {sender.holder_name} to {receiver.holder_name}.\")\n",
    "\n",
    "    def display_all_accounts(self):\n",
    "        if not self.accounts:\n",
    "            print(\"No accounts in the bank yet.\")\n",
    "        else:\n",
    "            print(\"\\nAll Bank Accounts:\")\n",
    "            for account in self.accounts:\n",
    "                account.display_details()\n",
    "\n",
    "\n",
    "# ===============================\n",
    "#         MAIN PROGRAM (CLI)\n",
    "# ===============================\n",
    "\n",
    "bank = Bank()\n",
    "\n",
    "while True:\n",
    "    print(\"\\n--- BANK MENU ---\")\n",
    "    print(\"1. Add Account\")\n",
    "    print(\"2. Check Balance\")\n",
    "    print(\"3. Deposit Money\")\n",
    "    print(\"4. Withdraw Money\")\n",
    "    print(\"5. Transfer Money\")\n",
    "    print(\"6. Display All Accounts\")\n",
    "    print(\"7. Exit\")\n",
    "\n",
    "    choice = input(\"Choose an option (1-7): \")\n",
    "\n",
    "    if choice == \"1\":\n",
    "        acc_num = input(\"Enter account number: \")\n",
    "        name = input(\"Enter account holder name: \")\n",
    "        initial = float(input(\"Enter initial deposit: \"))\n",
    "        new_acc = Account(acc_num, name, initial)\n",
    "        bank.add_account(new_acc)\n",
    "\n",
    "    elif choice == \"2\":\n",
    "        acc_num = input(\"Enter account number: \")\n",
    "        bank.check_balance(acc_num)\n",
    "\n",
    "    elif choice == \"3\":\n",
    "        acc_num = input(\"Enter account number: \")\n",
    "        amount = float(input(\"Enter deposit amount: \"))\n",
    "        bank.deposit_money(acc_num, amount)\n",
    "\n",
    "    elif choice == \"4\":\n",
    "        acc_num = input(\"Enter account number: \")\n",
    "        amount = float(input(\"Enter withdrawal amount: \"))\n",
    "        bank.withdraw_money(acc_num, amount)\n",
    "\n",
    "    elif choice == \"5\":\n",
    "        from_acc = input(\"Enter sender account number: \")\n",
    "        to_acc = input(\"Enter receiver account number: \")\n",
    "        amount = float(input(\"Enter transfer amount: \"))\n",
    "        bank.transfer_money(from_acc, to_acc, amount)\n",
    "\n",
    "    elif choice == \"6\":\n",
    "        bank.display_all_accounts()\n",
    "\n",
    "    elif choice == \"7\":\n",
    "        print(\"Exiting program...\")\n",
    "        break\n",
    "\n",
    "    else:\n",
    "        print(\"Invalid choice! Please enter a number between 1 and 7.\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
